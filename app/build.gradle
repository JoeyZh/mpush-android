apply plugin: 'com.android.application'

repositories {
    mavenLocal()
}


dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.2.1'
    compile project(':plug')
}

project.ext {
    channels = [
            "mpush":"MPushDemo"
    ]
}

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"

    defaultConfig {
        applicationId "com.mpush.demo"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "2.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "APP_SERVER", "\"http://39.82.36.32:9999\""
            resValue "string","app_server","http://39.82.36.32:9999"
        }
        debug{
            buildConfigField "String", "APP_SERVER", "\"http://192.168.1.112:9999\""
            resValue "string","app_server","http://192.168.1.112:9999"
        }
    }

    productFlavors.whenObjectAdded { flavor ->
        flavor.extensions.create("channel", StringExtension, "")
    }


    productFlavors {
        //多渠道配置
        if (project.hasProperty("channels")) {
            getChannelFlavors().each { name, config ->
                "$name" {
                    channel.value = config.channel
                }
            }
        } else {
            println "===> Not found channel list !"
        }
    }

   applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                output.outputFile = new File(outputFile.parent, "MPushDemo.apk")
            }
        }
    }
}

def getChannelFlavors() {
    def flavors = [:]
    channels.each { item ->
        println "Got channel id: " + item.value
        flavors.put(item.value, [
                channel: item.key
        ])
    }
    return flavors;
}

class StringExtension {
    String value

    StringExtension(String value) {
        this.value = value
    }

    public void setValue(String value) {
        this.value = value
    }

    public String getValue() {
        return value
    }
}